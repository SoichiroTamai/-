let
    physicalMonth = 10,
    physicalDayOfWeek = Day.Saturday,

    today = Date.From(DateTimeZone.LocalNow()),
    startYear = Date.Year(today) - 1,
    endYear = Date.Year(today) + 1,
    startDate = #date(startYear, physicalMonth, 1),
    endDate = #date(endYear, physicalMonth, 1),

    dates = List.Dates(startDate, Duration.Days(endDate - startDate), #duration(1,0,0,0)),
    baseTable = Table.FromList(dates, Splitter.SplitByNothing(), {"Date"}),

    withWeekStart = Table.AddColumn(
        baseTable, "WeekStart",
        each Date.AddDays([Date], -Date.DayOfWeek([Date], physicalDayOfWeek)),
        type date
    ),

    fiscalYearStart = (y as number) as date =>
        let 
            base = #date(y, physicalMonth, 1),
            start = Date.AddDays(base, -Date.DayOfWeek(base, physicalDayOfWeek))
        in start,

    withFiscalYear = Table.AddColumn(
        withWeekStart, "FiscalYear",
        each let
            y = Date.Year([Date]),
            fyStart = fiscalYearStart(y)
        in if [Date] >= fyStart then y+1 else y
    ),

    withFiscalStart = Table.AddColumn(
        withFiscalYear, "FiscalYearStart",
        each fiscalYearStart([FiscalYear]-1),
        type date
    ),

    withFiscalWeek = Table.AddColumn(
        withFiscalStart, "FiscalWeek",
        each Number.IntegerDivide(
            Duration.Days([WeekStart] - [FiscalYearStart]), 7
        ) + 1
    ),

    withMonthWeek = Table.AddColumn(
        withFiscalWeek, "MonthWeek",
        each let
            firstOfMonth = Date.StartOfMonth([Date]),
            monthStartWeek = Date.AddDays(firstOfMonth, -Date.DayOfWeek(firstOfMonth, physicalDayOfWeek)),
            weekNum = Number.IntegerDivide(Duration.Days([WeekStart] - monthStartWeek),7) + 1
        in Text.From(Date.Month([Date])) & "æœˆ" & Text.From(weekNum) & "w"
    )
in
    withMonthWeek
